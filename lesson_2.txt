What happens when you initialize a repository? Why do you need to do it?

Initializing a repository creates a git repository inside the current directory.
This allows you to add and track files within the directory.
It does not create any commits.

How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area acts as a place for files to stay that designates them as part of the next commit. 
This allows you to commit individual files and individual changes without saving everything at once. 

How can you use the staging area to make sure you have one commit per logical change?

You can add only the files you want to commit, and give that commit a unique name.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

If you want to add a feature that may not make it into the final version of your code, want to keep a legacy version
that you continue to update, want to host a public bug free version, or anything else, you can make a branch that 
holds the changes you make.

How do the diagrams help you visualize the branch structure?

They show how edits on a commit previously made are not actually accessible unless the edits are committed to the 
current branch or a new branch is started. It also shows where merge will come into play.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

Merging two branches results in an updated version of code that shows the changes made in both branches' commits.
The diagram shows how both of the branches' commit history will be combined in the git log of the updated branch.
